1. Get the application URL by running these commands:
{{- if and .Values.api.enabled .Values.api.ingress.enabled }}
{{- range $host := .Values.api.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.api.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if and .Values.api.enabled (contains "NodePort" .Values.api.service.type) }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "kaia-orderbook-dex-backend.fullname" . }}-api)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if and .Values.api.enabled (contains "LoadBalancer" .Values.api.service.type) }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "kaia-orderbook-dex-backend.fullname" . }}-api'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "kaia-orderbook-dex-backend.fullname" . }}-api --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.api.service.port }}
{{- else if and .Values.api.enabled (contains "ClusterIP" .Values.api.service.type) }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "kaia-orderbook-dex-backend.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=api" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the deployment status:
  kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

3. Check logs:
  {{- if .Values.api.enabled }}
  kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=api
  {{- end }}
  {{- if .Values.event.enabled }}
  kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=event
  {{- end }}

4. Configuration:
  - Environment: {{ .Values.environment.phase }}
  - Configuration is managed at the application level
  - Secrets are managed through AWS/GCP Secret Manager

5. Services deployed:
  {{- if .Values.api.enabled }}
  - API Service: {{ include "kaia-orderbook-dex-backend.fullname" . }}-api (Port: {{ .Values.api.service.port }})
  {{- end }}
  {{- if .Values.event.enabled }}
  - Event Service: {{ include "kaia-orderbook-dex-backend.fullname" . }}-event (Port: {{ .Values.event.service.port }})
  {{- end }}